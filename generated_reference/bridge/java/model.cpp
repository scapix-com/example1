// Generated by Scapix Language Bridge
// https://www.scapix.com

#include <scapix/bridge/java/init.h>
#include <chat/model.h>

namespace scapix {
namespace link {
namespace java {

template <>
struct class_name<chat::model>
{
	using type = SCAPIX_META_STRING("com/scapix/chat/Model");
};

template <>
struct class_name<chat::contact>
{
	using type = SCAPIX_META_STRING("com/scapix/chat/Contact");
};

template <>
struct class_name<chat::session>
{
	using type = SCAPIX_META_STRING("com/scapix/chat/Session");
};

template <>
struct class_name<chat::session2>
{
	using type = SCAPIX_META_STRING("com/scapix/chat/Session2");
};

} // namespace java
} // namespace link
} // namespace scapix

void scapix_java_export_model()
{
	scapix::link::java::native_methods
	<
		scapix::link::java::class_name_t<chat::model>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("_init"),
			void(),
			void(scapix::bridge::java::init<chat::model>::*)(),
			&scapix::bridge::java::init<chat::model>::create
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("connect"),
			void(scapix::link::java::ref<SCAPIX_META_STRING("java/lang/String")>, scapix::link::java::ref<SCAPIX_META_STRING("java/lang/String")>),
			void(chat::model::*)(std::basic_string<char>, std::basic_string<char>),
			&chat::model::connect
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("disconnect"),
			void(),
			void(chat::model::*)(),
			&chat::model::disconnect
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("friends"),
			scapix::link::java::ref<scapix::link::java::array<SCAPIX_META_STRING("com/scapix/chat/Contact")>>(),
			const std::vector<std::shared_ptr<chat::contact>, std::allocator<std::shared_ptr<chat::contact> > > &(chat::model::*)(),
			&chat::model::friends
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("friends"),
			scapix::link::java::ref<scapix::link::java::array<SCAPIX_META_STRING("com/scapix/chat/Contact")>>(scapix::link::java::ref<SCAPIX_META_STRING("java/lang/String")>),
			std::vector<std::shared_ptr<chat::contact>, std::allocator<std::shared_ptr<chat::contact> > >(chat::model::*)(std::basic_string<char>),
			&chat::model::friends
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("addFriend"),
			void(scapix::link::java::ref<SCAPIX_META_STRING("com/scapix/chat/Contact")>),
			void(chat::model::*)(std::shared_ptr<chat::contact>),
			&chat::model::add_friend
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("removeFriend"),
			void(scapix::link::java::ref<SCAPIX_META_STRING("com/scapix/chat/Contact")>),
			void(chat::model::*)(std::shared_ptr<chat::contact>),
			&chat::model::remove_friend
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("sessions"),
			scapix::link::java::ref<scapix::link::java::array<SCAPIX_META_STRING("com/scapix/chat/Session")>>(),
			const std::vector<std::shared_ptr<chat::session>, std::allocator<std::shared_ptr<chat::session> > > &(chat::model::*)(),
			&chat::model::sessions
		>,

		scapix::link::java::native_method
		<
			SCAPIX_META_STRING("sessionWithContact"),
			scapix::link::java::ref<SCAPIX_META_STRING("com/scapix/chat/Session")>(scapix::link::java::ref<SCAPIX_META_STRING("com/scapix/chat/Contact")>),
			std::shared_ptr<chat::session>(chat::model::*)(std::shared_ptr<chat::contact>),
			&chat::model::session_with_contact
		>
	>::register_();
}
